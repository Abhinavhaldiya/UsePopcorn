[{"C:\\Users\\Abhinav Kumar\\OneDrive\\Desktop\\React Dev\\10 usepopcorn\\src\\index.js":"1","C:\\Users\\Abhinav Kumar\\OneDrive\\Desktop\\React Dev\\10 usepopcorn\\src\\StarRating.js":"2","C:\\Users\\Abhinav Kumar\\OneDrive\\Desktop\\React Dev\\10 usepopcorn\\src\\App-v1.js":"3","C:\\Users\\Abhinav Kumar\\OneDrive\\Desktop\\React Dev\\10 usepopcorn\\src\\App.js":"4"},{"size":670,"mtime":1689155096935,"results":"5","hashOfConfig":"6"},{"size":3308,"mtime":1689086530251,"results":"7","hashOfConfig":"6"},{"size":5312,"mtime":1689155091346,"results":"8","hashOfConfig":"6"},{"size":12252,"mtime":1689248560404,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13"},"6ibfoi",{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},"C:\\Users\\Abhinav Kumar\\OneDrive\\Desktop\\React Dev\\10 usepopcorn\\src\\index.js",["24","25"],[],"import React, { useState } from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport StarRating from \"./StarRating\";\n\n/* function Test(){\n  const [movieRating,setMovieRating]=useState(0);\n  return <div>\n    <StarRating color='blue'maxRating={10} onSetRating={setMovieRating} />\n    <p>This movie was rated {movieRating} stars</p>\n  </div>\n} */\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(\n  <React.StrictMode>\n    {/* <StarRating maxRating={5} messages={[\"very bad\",\"bad\",\"okay\",\"good\",\"must watch\"]} defaultRating={3}/> */}\n    {/* <Test /> */}\n    <App />\n  </React.StrictMode>\n);\n","C:\\Users\\Abhinav Kumar\\OneDrive\\Desktop\\React Dev\\10 usepopcorn\\src\\StarRating.js",[],[],"C:\\Users\\Abhinav Kumar\\OneDrive\\Desktop\\React Dev\\10 usepopcorn\\src\\App-v1.js",["26","27"],[],"C:\\Users\\Abhinav Kumar\\OneDrive\\Desktop\\React Dev\\10 usepopcorn\\src\\App.js",["28","29"],[],"import { useEffect, useRef, useState } from \"react\";\r\nimport \"./StarRating.js\";\r\nimport StarRating from \"./StarRating.js\";\r\n\r\nconst tempMovieData = [\r\n  {\r\n    imdbID: \"tt1375666\",\r\n    Title: \"Inception\",\r\n    Year: \"2010\",\r\n    Poster:\r\n      \"https://m.media-amazon.com/images/M/MV5BMjAxMzY3NjcxNF5BMl5BanBnXkFtZTcwNTI5OTM0Mw@@._V1_SX300.jpg\",\r\n  },\r\n  {\r\n    imdbID: \"tt0133093\",\r\n    Title: \"The Matrix\",\r\n    Year: \"1999\",\r\n    Poster:\r\n      \"https://m.media-amazon.com/images/M/MV5BNzQzOTk3OTAtNDQ0Zi00ZTVkLWI0MTEtMDllZjNkYzNjNTc4L2ltYWdlXkEyXkFqcGdeQXVyNjU0OTQ0OTY@._V1_SX300.jpg\",\r\n  },\r\n  {\r\n    imdbID: \"tt6751668\",\r\n    Title: \"Parasite\",\r\n    Year: \"2019\",\r\n    Poster:\r\n      \"https://m.media-amazon.com/images/M/MV5BYWZjMjk3ZTItODQ2ZC00NTY5LWE0ZDYtZTI3MjcwN2Q5NTVkXkEyXkFqcGdeQXVyODk4OTc3MTY@._V1_SX300.jpg\",\r\n  },\r\n];\r\n\r\nconst tempWatchedData = [\r\n  {\r\n    imdbID: \"tt1375666\",\r\n    Title: \"Inception\",\r\n    Year: \"2010\",\r\n    Poster:\r\n      \"https://m.media-amazon.com/images/M/MV5BMjAxMzY3NjcxNF5BMl5BanBnXkFtZTcwNTI5OTM0Mw@@._V1_SX300.jpg\",\r\n    runtime: 148,\r\n    imdbRating: 8.8,\r\n    userRating: 10,\r\n  },\r\n  {\r\n    imdbID: \"tt0088763\",\r\n    Title: \"Back to the Future\",\r\n    Year: \"1985\",\r\n    Poster:\r\n      \"https://m.media-amazon.com/images/M/MV5BZmU0M2Y1OGUtZjIxNi00ZjBkLTg1MjgtOWIyNThiZWIwYjRiXkEyXkFqcGdeQXVyMTQxNzMzNDI@._V1_SX300.jpg\",\r\n    runtime: 116,\r\n    imdbRating: 8.5,\r\n    userRating: 9,\r\n  },\r\n];\r\n\r\nconst average = (arr) =>\r\n  arr.reduce((acc, cur, i, arr) => acc + cur / arr.length, 0);\r\n\r\nconst KEY = \"2f73db00\";\r\nexport default function App() {\r\n  const [query, setQuery] = useState(\"\");\r\n  const [movies, setMovies] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState(\"\");\r\n  const [selectedID, setSelectedID] = useState(null);\r\n\r\n  //const [watched, setWatched] = useState([]);\r\n  const [watched, setWatched] = useState(function () {\r\n    const storedValue = localStorage.getItem(\"watched\");\r\n    return JSON.parse(storedValue);\r\n  });\r\n\r\n  function handleSelectMovie(id) {\r\n    setSelectedID((selectedID) => (id === selectedID ? null : id));\r\n  }\r\n  function handleCloseMovie() {\r\n    setSelectedID(null);\r\n  }\r\n  function handleAddWatched(movie) {\r\n    setWatched((watched) => [...watched, movie]);\r\n  }\r\n  function handleDeleteWatched(id) {\r\n    setWatched((watched) => watched.filter((movie) => movie.imdbID !== id));\r\n  }\r\n  useEffect(\r\n    function () {\r\n      localStorage.setItem(\"watched\", JSON.stringify(watched));\r\n    },\r\n    [watched]\r\n  );\r\n\r\n  useEffect(\r\n    function () {\r\n      const controller = new AbortController();\r\n\r\n      async function fetchMovies() {\r\n        try {\r\n          setIsLoading(true);\r\n          setError(\"\");\r\n          const res = await fetch(\r\n            `http://www.omdbapi.com/?apikey=${KEY}&s=${query}`,\r\n            { signal: controller.signal }\r\n          );\r\n          if (!res.ok)\r\n            throw new Error(\"Something went wrong with fetching movies\");\r\n          const data = await res.json();\r\n          if (data.Response === \"False\") throw new Error(\"Movie not found\");\r\n          setMovies(data.Search);\r\n          setError(\"\");\r\n        } catch (err) {\r\n          if (err.message !== \"AbortError\") {\r\n            setError(err.message);\r\n          }\r\n        } finally {\r\n          setIsLoading(false);\r\n        }\r\n      }\r\n      if (query.length < 3) {\r\n        setMovies([]);\r\n        setError(\"\");\r\n        return;\r\n      }\r\n      handleCloseMovie();\r\n      fetchMovies();\r\n      return function () {\r\n        controller.abort();\r\n      };\r\n    },\r\n    [query]\r\n  );\r\n  return (\r\n    <>\r\n      <NavBar>\r\n        <Logo />\r\n        <Search query={query} setQuery={setQuery} />\r\n        <NumResult movies={movies} />\r\n      </NavBar>\r\n      <Main>\r\n        <Box>\r\n          {isLoading && <Loader />}\r\n          {!isLoading && !error && (\r\n            <MovieList movies={movies} onSelectMovie={handleSelectMovie} />\r\n          )}\r\n          {error && <ErrorMessage message={error} />}\r\n        </Box>\r\n        <Box>\r\n          {selectedID ? (\r\n            <MovieDetails\r\n              selectedID={selectedID}\r\n              onCloseMovie={handleCloseMovie}\r\n              onAddWatched={handleAddWatched}\r\n              watched={watched}\r\n            />\r\n          ) : (\r\n            <>\r\n              <WatchedSummary watched={watched} />\r\n              <WatchedMoviesList\r\n                watched={watched}\r\n                onDeleteWatched={handleDeleteWatched}\r\n              />\r\n            </>\r\n          )}\r\n        </Box>\r\n      </Main>\r\n    </>\r\n  );\r\n}\r\nfunction ErrorMessage({ message }) {\r\n  return (\r\n    <p className=\"error\">\r\n      <span>üíÄ</span>\r\n      {message}\r\n    </p>\r\n  );\r\n}\r\nfunction Loader() {\r\n  return <p className=\"loader\">Loading...</p>;\r\n}\r\nfunction NavBar({ children }) {\r\n  return <nav className=\"nav-bar\">{children}</nav>;\r\n}\r\nfunction Search({ query, setQuery }) {\r\n  const inputEl = useRef(null);\r\n\r\n  useEffect(\r\n    function () {\r\n      function callback(e) {\r\n        if (document.activeElement === inputEl.current) return;\r\n\r\n        if (e.code === \"Enter\") {\r\n          inputEl.current.focus();\r\n          setQuery(\"\");\r\n        }\r\n      }\r\n      document.addEventListener(\"keydown\", callback);\r\n      return () => document.addEventListener(\"keydown\", callback);\r\n    },\r\n    [setQuery]\r\n  );\r\n  return (\r\n    <input\r\n      className=\"search\"\r\n      type=\"text\"\r\n      placeholder=\"Search movies...\"\r\n      value={query}\r\n      onChange={(e) => setQuery(e.target.value)}\r\n      ref={inputEl}\r\n    />\r\n  );\r\n}\r\nfunction Logo() {\r\n  return (\r\n    <div className=\"logo\">\r\n      <span role=\"img\">üçø</span>\r\n      <h1>usePopcorn</h1>\r\n    </div>\r\n  );\r\n}\r\nfunction NumResult({ movies }) {\r\n  return (\r\n    <p className=\"num-results\">\r\n      Found <strong>{movies.length}</strong> results\r\n    </p>\r\n  );\r\n}\r\nfunction Main({ children }) {\r\n  return <main className=\"main\">{children}</main>;\r\n}\r\nfunction Box({ children }) {\r\n  const [isOpen, setIsOpen] = useState(true);\r\n  return (\r\n    <div className=\"box\">\r\n      <button className=\"btn-toggle\" onClick={() => setIsOpen((open) => !open)}>\r\n        {isOpen ? \"‚Äì\" : \"+\"}\r\n      </button>\r\n      {isOpen && children}\r\n    </div>\r\n  );\r\n}\r\nfunction MovieList({ movies, onSelectMovie }) {\r\n  return (\r\n    <ul className=\"list list-movies\">\r\n      {movies?.map((movie) => (\r\n        <Movie movie={movie} key={movie.imdbID} onSelectMovie={onSelectMovie} />\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\nfunction Movie({ movie, onSelectMovie }) {\r\n  return (\r\n    <li onClick={() => onSelectMovie(movie.imdbID)}>\r\n      <img src={movie.Poster} alt={`${movie.Title} poster`} />\r\n      <h3>{movie.Title}</h3>\r\n      <div>\r\n        <p>\r\n          <span>üóì</span>\r\n          <span>{movie.Year}</span>\r\n        </p>\r\n      </div>\r\n    </li>\r\n  );\r\n}\r\nfunction MovieDetails({ selectedID, onCloseMovie, onAddWatched, watched }) {\r\n  const [movie, setMovie] = useState({});\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [userRating, setUserRating] = useState(\"\");\r\n\r\n  const countRef=useRef(0);\r\n\r\n    useEffect(\r\n        function(){\r\n            if(userRating)  countRef.current++;\r\n        },\r\n        [userRating]\r\n    )\r\n\r\n  const isWatched = watched.map((movie) => movie.imdbID).includes(selectedID);\r\n  const watchedUserRating = watched.find(\r\n    (movie) => movie.imdbID === selectedID\r\n  )?.userRating;\r\n\r\n  const {\r\n    Title: title,\r\n    Year: year,\r\n    Poster: poster,\r\n    Runtime: runtime,\r\n    imdbRating,\r\n    Plot: plot,\r\n    Released: released,\r\n    Actors: actors,\r\n    Director: director,\r\n    Genre: genre,\r\n  } = movie;\r\n\r\n  function handleAdd() {\r\n    const newWatchedMovie = {\r\n      imdbID: selectedID,\r\n      title,\r\n      year,\r\n      poster,\r\n      imdbRating: Number(imdbRating),\r\n      runtime: Number(runtime.split(\" \").at(0)),\r\n      userRating,\r\n      countRatingDecisions:countRef.current,\r\n    };\r\n    onAddWatched(newWatchedMovie);\r\n    onCloseMovie();\r\n  }\r\n  useEffect(\r\n    function () {\r\n      if (!title) return;\r\n      document.title = `Movie | ${title}`;\r\n      return function () {\r\n        document.title = \"UsePopcorn\";\r\n      };\r\n    },\r\n    [title]\r\n  );\r\n  useEffect(\r\n    function () {\r\n      function callBack(e) {\r\n        if (e.code === \"Escape\") {\r\n          onCloseMovie();\r\n        }\r\n      }\r\n      document.addEventListener(\"keydown\", callBack);\r\n      return function () {\r\n        document.removeEventListener(\"keydown\", callBack);\r\n      };\r\n    },\r\n    [onCloseMovie]\r\n  );\r\n  useEffect(\r\n    function () {\r\n      async function getMovieDetails() {\r\n        setIsLoading(true);\r\n        const res = await fetch(\r\n          `http://www.omdbapi.com/?apikey=${KEY}&i=${selectedID}`\r\n        );\r\n        const data = await res.json();\r\n        setMovie(data);\r\n        setIsLoading(false);\r\n      }\r\n      getMovieDetails();\r\n    },\r\n    [selectedID]\r\n  );\r\n  return (\r\n    <div className=\"details\">\r\n      {isLoading ? (\r\n        <Loader />\r\n      ) : (\r\n        <>\r\n          <header>\r\n            <button className=\"btn-back\" onClick={onCloseMovie}>\r\n              &larr;\r\n            </button>\r\n            <img src={poster} alt={`Poster of ${movie} movie`} />\r\n            <div className=\"details-overview\">\r\n              <h2>{title}</h2>\r\n              <p>\r\n                {released} &bull; {runtime}\r\n              </p>\r\n              <p>{genre}</p>\r\n              <p>\r\n                <span>‚≠ê</span>\r\n                {imdbRating} IMDb rating\r\n              </p>\r\n            </div>\r\n          </header>\r\n          <section>\r\n            <div className=\"rating\">\r\n              {!isWatched ? (\r\n                <>\r\n                  <StarRating\r\n                    maxRating={10}\r\n                    size={24}\r\n                    onSetRating={setUserRating}\r\n                  />\r\n                  {userRating > 0 && (\r\n                    <button className=\"btn-add\" onClick={handleAdd}>\r\n                      + Add to list\r\n                    </button>\r\n                  )}\r\n                </>\r\n              ) : (\r\n                <p>\r\n                  You rated with movie {watchedUserRating}\r\n                  <span>‚≠ê</span>\r\n                </p>\r\n              )}\r\n            </div>\r\n            <p>\r\n              <em>{plot}</em>\r\n            </p>\r\n            <p>Starring {actors}</p>\r\n            <p>Directed by {director}</p>\r\n          </section>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\nfunction WatchedSummary({ watched }) {\r\n  const avgImdbRating = average(watched.map((movie) => movie.imdbRating));\r\n  const avgUserRating = average(watched.map((movie) => movie.userRating));\r\n  const avgRuntime = average(watched.map((movie) => movie.runtime));\r\n  return (\r\n    <div className=\"summary\">\r\n      <h2>Movies you watched</h2>\r\n      <div>\r\n        <p>\r\n          <span>#Ô∏è‚É£</span>\r\n          <span>{watched.length} movies</span>\r\n        </p>\r\n        <p>\r\n          <span>‚≠êÔ∏è</span>\r\n          <span>{avgImdbRating.toFixed(2)}</span>\r\n        </p>\r\n        <p>\r\n          <span>üåü</span>\r\n          <span>{avgUserRating.toFixed(2)}</span>\r\n        </p>\r\n        <p>\r\n          <span>‚è≥</span>\r\n          <span>{avgRuntime} min</span>\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nfunction WatchedMoviesList({ watched, onDeleteWatched }) {\r\n  return (\r\n    <ul className=\"list\">\r\n      {watched.map((movie) => (\r\n        <WatchedMovie movie={movie} onDeleteWatched={onDeleteWatched} />\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\nfunction WatchedMovie({ movie, onDeleteWatched }) {\r\n  return (\r\n    <li key={movie.imdbID}>\r\n      <img src={movie.poster} alt={`${movie.title} poster`} />\r\n      <h3>{movie.title}</h3>\r\n      <div>\r\n        <p>\r\n          <span>‚≠êÔ∏è</span>\r\n          <span>{movie.imdbRating}</span>\r\n        </p>\r\n        <p>\r\n          <span>üåü</span>\r\n          <span>{movie.userRating}</span>\r\n        </p>\r\n        <p>\r\n          <span>‚è≥</span>\r\n          <span>{movie.runtime} min</span>\r\n        </p>\r\n        <button\r\n          className=\"btn-delete\"\r\n          onClick={() => onDeleteWatched(movie.imdbID)}\r\n        >\r\n          X\r\n        </button>\r\n      </div>\r\n    </li>\r\n  );\r\n}\r\n",{"ruleId":"30","severity":1,"message":"31","line":1,"column":17,"nodeType":"32","messageId":"33","endLine":1,"endColumn":25},{"ruleId":"30","severity":1,"message":"34","line":5,"column":8,"nodeType":"32","messageId":"33","endLine":5,"endColumn":18},{"ruleId":"30","severity":1,"message":"35","line":55,"column":18,"nodeType":"32","messageId":"33","endLine":55,"endColumn":27},{"ruleId":"30","severity":1,"message":"36","line":56,"column":19,"nodeType":"32","messageId":"33","endLine":56,"endColumn":29},{"ruleId":"30","severity":1,"message":"37","line":5,"column":7,"nodeType":"32","messageId":"33","endLine":5,"endColumn":20},{"ruleId":"30","severity":1,"message":"38","line":29,"column":7,"nodeType":"32","messageId":"33","endLine":29,"endColumn":22},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'StarRating' is defined but never used.","'setMovies' is assigned a value but never used.","'setWatched' is assigned a value but never used.","'tempMovieData' is assigned a value but never used.","'tempWatchedData' is assigned a value but never used."]